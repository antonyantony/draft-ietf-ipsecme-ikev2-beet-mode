



IPSECME Working Group                                          A. Antony
Internet-Draft                                                   secunet
Intended status: Standards Track                       10 September 2023
Expires: 13 March 2024


             A Bound End-to-End Tunnel (BEET) mode for ESP
                   draft-antony-ipsecme-beet-mode-00

Abstract

   This document specifies a new mode for IPsec ESP, known as the Bound
   End-to-End Tunnel (BEET) mode.  This mode complements the existing
   ESP tunnel and transport modes, enhancing end-to-end tunnels.  It
   offers the characteristics of tunnel mode but without its usual
   overhead.  The mode is designed to accommodate evolving applications
   of ESP, such minimalist tunnel mode endpoint, mobility and multi-
   address multi-homing.  Additionally, this document proposes a new
   Notifier, USE_BEET_MODE, for the Internet Key Exchange Protocol
   Version 2 (IKEv2) specified in [RFC7296], to facilitate BEET mode
   Security Association negotiation.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 13 March 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights



Antony                    Expires 13 March 2024                 [Page 1]

Internet-Draft              BEET mode for ESP             September 2023


   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   4
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Background  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Related work  . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Use scenarios . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Minimal IPsec for end-to-end  . . . . . . . . . . . . . .   5
     3.2.  NAT traversal . . . . . . . . . . . . . . . . . . . . . .   5
     3.3.  End-node multi-address multi-homing . . . . . . . . . . .   6
   4.  Protocol Definition . . . . . . . . . . . . . . . . . . . . .   6
     4.1.  Changes to Security Association data structure  . . . . .   6
     4.2.  Packet format . . . . . . . . . . . . . . . . . . . . . .   7
     4.3.  Inner IPv4 Datagram . . . . . . . . . . . . . . . . . . .   7
     4.4.  Inner IPv6 Datagram . . . . . . . . . . . . . . . . . . .   8
   5.  Cryptographic processing  . . . . . . . . . . . . . . . . . .   9
   6.  IP header processing  . . . . . . . . . . . . . . . . . . . .   9
   7.  Handling of outgoing packets  . . . . . . . . . . . . . . . .  10
   8.  Handling of incoming packets  . . . . . . . . . . . . . . . .  10
   9.  IPv4 options handling . . . . . . . . . . . . . . . . . . . .  11
   10. IPv4 Inner Fragments  . . . . . . . . . . . . . . . . . . . .  12
   11. IPv6 inner Fragments  . . . . . . . . . . . . . . . . . . . .  12
   12. Mixed family IPv4 inside and IPv6 outside . . . . . . . . . .  12
   13. Policy Considerations . . . . . . . . . . . . . . . . . . . .  13
   14. Security Considerations . . . . . . . . . . . . . . . . . . .  13
   15. IKEv2 Negotiation . . . . . . . . . . . . . . . . . . . . . .  14
     15.1.  USE_BEET_MODE Notify Message Payload . . . . . . . . . .  15
   16. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  15
   17. Implementation Status . . . . . . . . . . . . . . . . . . . .  15
     17.1.  Linux XFRM . . . . . . . . . . . . . . . . . . . . . . .  16
     17.2.  strongSwan . . . . . . . . . . . . . . . . . . . . . . .  16
     17.3.  iproute2 . . . . . . . . . . . . . . . . . . . . . . . .  17
   18. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  17
   19. Normative References  . . . . . . . . . . . . . . . . . . . .  17
   20. Informative References  . . . . . . . . . . . . . . . . . . .  18
   Appendix A.  Additional Stuff . . . . . . . . . . . . . . . . . .  19
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  19








Antony                    Expires 13 March 2024                 [Page 2]

Internet-Draft              BEET mode for ESP             September 2023


1.  Introduction

   The current IPsec ESP specification [RFC4303] defines two modes of
   operation: tunnel mode and transport mode.  The tunnel mode is mainly
   intended for non-end-to-end use where one or both of the ends of the
   ESP Security Associations (SAs) are located in security gateways,
   separate from the actual end-nodes.  The transport mode is intended
   for end-to-end use, where both ends of the security association are
   terminated at the end-nodes themselves.  This document defines a new
   mode for ESP, called Bound End-to-End Tunnel (BEET) mode.  The
   purpose of the mode is to provide limited tunnel mode semantics
   without the overhead associated with the regular tunnel mode.  As the
   name states, the BEET mode is intended solely for end-to-end use.  It
   provides tunnel mode semantics in the sense that the IP addresses
   seen by the applications and the IP addresses used on the wire are
   distinct from each other, providing the illusion that the application
   level IP addresses are tunneled over the network level IP addresses.
   However, the mode does not support full tunnel semantics.  More
   specifically, the IP addresses as seen by the application are
   strictly bound, and only one pair of bound inner addresses can be
   used on any given BEET mode Security Association.  This is in
   contrast to the regular tunnel mode, where the inner IP addresses can
   be any addresses from a defined range.  A BEET mode Security
   Associations records two pairs of IP addresses, called inner
   addresses and outer addresses.  The inner addresses are what the
   applications see.  The outer addresses are what appear on the wire.
   Since the inner addresses are fixed for the lifetime of the Security
   Association, they need not to be sent in individual packets.
   Instead, they are set up as the Security Associations are created,
   they are verified when packets are sent, and they are restored as
   packets are received.  This all gives the BEET mode the efficiency of
   transport mode with a limited set of end-to-end tunnel semantics.
   The efficiency is accomplished by removing the inner IP header from
   the packet that is transported on the wire.  Due to removal of inner
   IP header, the TTL of tunneled packet is reduced by every router on
   the path as the TTL value is copied from inner to outer header by the
   sender and vice versa by the receiver.  The semantics of BEET mode is
   limited in the sense that only one fixed pair of inner addresses are
   allowed.  The outer addresses may change over the life time of the
   SA, but the inner addresses cannot.  If a new pair of inner addresses
   is needed, a new pair of BEET mode Security Associations must be
   established, or the regular tunnel mode must be used.  However, in
   the cases considered, a single pair of security associations is
   usually sufficient between any single pair of nodes.







Antony                    Expires 13 March 2024                 [Page 3]

Internet-Draft              BEET mode for ESP             September 2023


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Terminology

   In this section we define the terms specific to this document.  This
   section is normative.

   *  Inner IP address : An IP address as seen by applications, stored
      in TCP or other upper layer data structures, and processed by the
      IP stack prior to ESP processing in the output side and after ESP
      processing in the input side.

   *  Outer IP address: An IP address seen on the wire and processed by
      the IP stack after ESP processing in the output side and before
      ESP processing in the input side.

   *  Inner IP header: An IP header that contains inner IP addresses.
      In some cases an inner IP header may be represented as an internal
      data structure containing the data equivalent to an IP header.

   *  Outer IP header: An IP header that contains outer IP addresses.
      In some cases an outer IP header may be represented as an internal
      data structure containing the data equivalent to an IP header.

2.  Background

   TBD The following the old background may be re-write it?

   For a number of years people have been talking about using IPsec for
   other purposes than VPN.  In fact, the current specifications do
   provide support for end-to-end protection of data.  However, that
   mode is rarely used, for a number of reasons [6], [7].  One of the
   reasons, though, seems to be address agility.  That is, due to NAT,
   mobility, multi-address multi-homing, etc., the addresses that are
   used actually on the wire do not necessarily match with the addresses
   that the applications expect to see.  In the NAT case the addresses
   are changed on the fly, thereby invalidating any transport mode
   checksums (unless, of course, a tunnel is used).  Mobile nodes change
   their addresses periodically, and the existing applications rarely
   survive the address changes without some help, e.g., Mobile IP.
   Multi-addressing based multi-homed nodes would prefer to keep their
   connections active even when the primary (or currently used) IP
   address becomes unusable in the face of an network outage.  Based on
   the reasons above, there is clearly a need for a mode of



Antony                    Expires 13 March 2024                 [Page 4]

Internet-Draft              BEET mode for ESP             September 2023


   communication where the addresses that the applications see are
   distinct from the addresses that are actually used in the wire.  The
   current IPsec tunnel mode provides the required functionality, but at
   the cost of additional overhead in terms of larger packets and more
   complicated processing.

2.1.  Related work

   The basic idea captured by this draft has been floating around for a
   long time.  Steven Bellovin's HostNAT talk [8] and at the Los Angeles
   IETF is an early example, and this ID is based on BEET mode ID an
   pervious ID [I-D.nikander-esp-beet-mode].  After that, basically the
   same idea has surfaced several times.  Perhaps the most concrete
   current proposal is the Host Identity Protocol (HIP) [RFC5201] and
   [RFC5202] where BEET mode ESP processing is an integral part of the
   overall protocol.  [AA verify this part is it still used by updated
   RFC 7401] Minimal ESP [RFC9333] also propose to use BEET mode.

3.  Use scenarios

   In this section we describe a number of possible use scenarios.  None
   of these use scenarios are meant to be complete specifications on how
   exactly to support the functionality.  Separate specifications are
   needed for that.  Instead, the purpose of this section is to discuss
   the overall benefits of the BEET mode, and to lay out a road map for
   possible future documents.  This section is informative.

3.1.  Minimal IPsec for end-to-end

   Over the years BEET is used widely as minimal IPsec tunnel for end-
   to-end scenearios to reduce bytes send over the wire, [RFC9333]

3.2.  NAT traversal

   NAT traversal is currently a major problem in IPsec.  It is not
   sufficient to encapsulate the packets into UDP; additionally, tunnel
   mode must be used when there are multiple clients behind the same
   NAT.  Tunnel mode is required since the outer IP addresses at the
   ends of the protected connection differ.  If transport mode was used,
   the differing IP addresses would lead to failing upper layer TCP/UDP
   checksums.

   The BEET mode provides sufficient tunnel mode semantics without the
   packet overhead of the tunnel mode.  A pair of BEET mode SAs can be
   effectively used to "un-NAT" packets that have been NATed during
   their travel through the network.  Figure 1 illustrates the process.





Antony                    Expires 13 March 2024                 [Page 5]

Internet-Draft              BEET mode for ESP             September 2023


3.3.  End-node multi-address multi-homing

   The BEET mode provides for limited end-node multi-address multi-
   homing.  It semantically provides a tunnel between the end-hosts,
   with fixed inner IP addresses.  This allows a multi-homed host to use
   different outer IP addresses in different packets, without any notice
   by the upper layer protocols.  The upper layer protocols see the
   inner IP address at all times.  Thus, this limited form of multi-
   homing has no affect on the applications, which seemingly communicate
   over fixed IP addresses all the time.

   Implementing this kind of limited multi-homing support would require
   a small change to the current IPsec SPD and SA implementations.
   Currently the incoming SA selection is based on the SPI and
   destination address, with the implicit assumption that there is only
   one possible destination address for each incoming SA.  In a multi-
   homed host it would be desirable to have multiple destination
   addresses associated with the SA, thereby allowing the same SA to be
   used independent on the actual destination address in the packets.
   Removing the destination address from unicast SA lookup is already
   being proposed in the current ESP draft [RFC4303].

   If it is considered undesirable to change the implementations to
   support multiple alternative destination addresses, it would still be
   possible to support limited multi-homing by creating several parallel
   SAs, one for each destination address.  Each of these SAs would have
   identical inner addresses.  Effectively, this would distribute the
   tunnel over multiple SAs.

   In this latter implementation, the outgoing SA processing becomes
   more complex.  Selecting the outgoing SA does not depend only on the
   inner IP addresses but also on the outer destination address.
   Selecting the outer destination address depends on the current multi-
   homing situation.  This creates a situation where the SA processing
   must be deferred after selecting the actual outer address to be used.
   This might be difficult in some implementations.

4.  Protocol Definition

   In this section we define the exact protocol formats and operations.
   This section is normative.

4.1.  Changes to Security Association data structure

   A BEET mode Security Association contains the same data as a regular
   tunnel mode Security Association, with the exception that the inner
   selectors must be single addresses and cannot be subnets.  The data
   includes the following:



Antony                    Expires 13 March 2024                 [Page 6]

Internet-Draft              BEET mode for ESP             September 2023


   *  A pair of inner IP addresses.

   *  A pair of outer IP addresses.

   *  Cryptographic keys and other data as defined in [RFC2401]
      Section 4.4.3.

   A conforming implementation MAY store the data in a way similar to a
   regular tunnel mode Security Association.  Note that in a conforming
   implementation the inner and outer addresses MAY belong to different
   address families.  All implementations that support both IPv4 and
   IPv6 SHOULD support both IPv4-over-IPv6 and IPv6-over-IPv4 tunneling.

4.2.  Packet format

   The wire packet format is identical to the ESP transport mode wire
   format as defined in [RFC4303] Section 3.1.1.  However, the resulting
   packet contains outer IP addresses instead of the inner IP addresses
   received from the upper layer.  The construction of the outer headers
   is defined in [RFC2401] Section 5.1.2.  The following diagrams
   illustrates ESP BEET mode positioning for typical IPv4 and IPv6
   packets.

4.3.  Inner IPv4 Datagram

       ------------------------------
       | inner IP hdr  | TCP | Data  |
       ------------------------------

             Figure 1: IPv4 INNER DATAGRAM BEFORE APPLYING ESP

       ----------------------------------------------------
       | outer IP hdr  |     |     |      |   ESP   | ESP |
       | (any options) | ESP | TCP | Data | Trailer | ICV |
       ----------------------------------------------------
                             |<---- encryption ---->|
                       |<-------- integrity ------->|

              Figure 2: AFTER APPLYING ESP, OUTER v4 ADDRESSES

       --------------------------------------------------------
       | outer    | new ext |     |     |      |  ESP   | ESP |
       | IPv6 hdr | hdrs.   | ESP | TCP | Data | Trailer| ICV |
       --------------------------------------------------------
                                |<--- encryption ---->|
                          |<------- integrity ------->|

              Figure 3: AFTER APPLYING ESP, OUTER v6 ADDRESSES



Antony                    Expires 13 March 2024                 [Page 7]

Internet-Draft              BEET mode for ESP             September 2023


       ------------------------------
       | inner IP hdr  |     |      |
       |  + options    | TCP | Data |
       ------------------------------

     Figure 4: IPv4 INNER DATAGRAM with IP options BEFORE APPLYING ESP

       ----------------------------------------------------------
       | outer IP hdr  |     |     |     |      |   ESP   | ESP |
       | (any options) | ESP | PH  | TCP | Data | Trailer | ICV |
       ----------------------------------------------------------
                             |<------- encryption ------->|
                       |<----------- integrity ---------->|
             PH = Pseudo Header for IPv4 options from inner datagram.

      Figure 5: IPv4 AFTER APPLYING ESP, OUTER v4 ADDRESSES INNER IPv4
                                  OPTIONS

4.4.  Inner IPv6 Datagram

       --------------------------------------------
                   |                |  ext hdrs  |     |      |
                   | inner IPv6 hdr | if present | TCP | Data |
       --------------------------------------------

                Figure 6: IPv6 DATAGRAM BEFORE APPLYING ESP

       --------------------------------------------------------------
       | outer  | new ext |     | dest |     |      |  ESP    | ESP |
       | IP hdr | hdrs.   | ESP | opts.| TCP | Data | Trailer | ICV |
       --------------------------------------------------------------
                                       |<---- encryption ---->|
                                   |<------- integrity ------>|

       Figure 7: IPv6 DATAGRAM AFTER APPLYING ESP, OUTER v6 ADDRESSES

       ----------------------------------------------------------------
       | outer    | new ext |     | dest |     |      |  ESP    | ESP |
       | IPv6 hdr | hdrs.   | ESP | opts.| TCP | Data | Trailer | ICV |
       ----------------------------------------------------------------
                                       |<---- encryption ---->|
                                   |<------- integrity ------>|

      Figure 8: IPv6 DATAGRAM AFTER APPLYING ESP, OUTER IPv6 ADDRESSES







Antony                    Expires 13 March 2024                 [Page 8]

Internet-Draft              BEET mode for ESP             September 2023


       ---------------------------------------------------------
       | outer  |     | PH        |     |      |  ESP    | ESP |
       | IP hdr | ESP | dest opts.| TCP | Data | Trailer | ICV |
       ---------------------------------------------------------
                      |<------- encryption -------->|
                |<----------- integrity ----------->|
             PH = Pseudo Header for IPv6 options from inner datagram.

      Figure 9: IPv6 DATAGRAM AFTER APPLYING ESP, OUTER IPv4 ADDRESSES

5.  Cryptographic processing

   The outgoing packets MUST be protected exactly as in ESP transport
   mode [RFC4303].  That is, the upper layer protocol packet is wrapped
   into an ESP header, encrypted, and authenticated exactly as if
   regular transport mode was used.  The resulting ESP packet is subject
   to IP header processing as defined in Section 6 and Section 7.  The
   incoming ESP protected messages are verified and decrypted exactly as
   if regular transport mode was used.  The resulting clear text packet
   is subject to IP header processing as defined in Section 6 and
   Section 8

6.  IP header processing

   The biggest difference between the BEET mode and the other two modes
   is in IP header processing.  In the regular transport mode the IP
   header is kept intact.  In the regular tunnel mode an outer IP header
   is created on output and discarded on input.  In the BEET mode the IP
   header is replaced with another one on both input and output.  On the
   BEET mode output side, the IP header processing MUST first ensure
   that the IP addresses in the original IP header contain the inner
   addresses as specified in the SA.  This MAY be ensured by proper
   policy processing, and it is possible that no checks are needed at
   the SA processing time.  Once the IP header has been verified to
   contain the right IP inner addresses, it is discarded.  A new IP
   header is created, using the discarded inner header as a hint for
   other fields but the IP addresses.  The IP addresses in the new
   header MUST be the outer tunnel addresses.  On input side, the
   received IP header is simply discarded.  Since the packet has been
   decrypted and verified, no further checks are necessary.  A new IP
   header, corresponding to a tunnel mode inner header, is created,
   using the discarded outer header as a hint for other fields but the
   IP addresses.  The IP addresses in the new header MUST be the inner
   addresses.  As the outer header fields are used as hint for creating
   inner header, it must be noted that inner header differs as compared
   to tunnel-mode inner header.  In BEET mode the inner header will have
   the TTL, DF-bit and other option values from the outer header.  The
   TTL, DF-bit and other option values of the inner header MUST be



Antony                    Expires 13 March 2024                 [Page 9]

Internet-Draft              BEET mode for ESP             September 2023


   processed by the stack.

7.  Handling of outgoing packets

   The outgoing BEET mode packets are processed as follows:

   *  The system MUST verify that the IP header contains the inner
      source and destination addresses, exactly as defined in the SA.
      This verification MAY be explicit, or it MAY be implicit, for
      example, as a result of prior policy processing.  Note that in
      some implementations there may be no real IP header at this time
      but the source and destination addresses may be carried out-of-
      band.  In case the source address is still unassigned, it SHOULD
      be ensured that the designated inner source address would be
      selected at a later stage.

   *  The IP payload (the contents of the packet beyond the IP header)
      is wrapped into an ESP header as defined in [RFC4303] Section 3.3.

   *  A new IP header is constructed, replacing the original one.  The
      new IP header MUST contain the outer source and destination
      addresses, as defined in the SA.  Note that in some
      implementations there may be no real IP header at this time but
      the source and destination addresses may be carried out-of-band.
      In the case where the source address must be left unassigned, it
      SHOULD be made sure that the right source address is selected at a
      later stage.  Other than the addresses, it is RECOMMENDED that the
      new IP header copies the fields from the original IP header.

   *  If there are any IPv4 options in the original packet, it is
      RECOMMENDED that they are discarded.  If the inner header contains
      one or more options that need to be transported between the tunnel
      end-points, sender MUST encapsulate the options as defined in
      Section 9

   Instead of literally discarding the IP header and constructing a new
   one, a conforming implementation MAY simply replace the addresses in
   an existing header.  However, if the RECOMMENDED feature of allowing
   the inner and outer addresses from different address families is
   used, this simple strategy does not work.

8.  Handling of incoming packets

   The incoming BEET mode packets are processed as follows:

   1.  The system MUST verify and decrypt the incoming packet
       successfully, as defined in [RFC4303] section 3.4.  If the
       verification or decryption fails, the packet MUST be discarded.



Antony                    Expires 13 March 2024                [Page 10]

Internet-Draft              BEET mode for ESP             September 2023


   2.  The original IP header is simply discarded, without any checks.
       Since the ESP verification succeeded, the packet can be safely
       assumed to have arrived from the right sender.

   3.  A new IP header is constructed, replacing the original one.  The
       new IP header MUST contain the inner source and destination
       addresses, as defined in the SA.  If the sender has set the ESP
       next protocol field to 94 and included the Pseudo-Header(PH) as
       described in Section 9, the receiver MUST include the options
       after the constructed IP header.  Note, that in some
       implementations the real IP header may have already been
       discarded and the source and destination addresses are carried
       out-of-band.  In such case the out-of-band addresses MUST be the
       inner addresses.  Other than the addresses, it is RECOMMENDED
       that the new IP header copies the fields from the original IP
       header.

   Instead of literally discarding the IP header and constructing a new
   one a conforming implementation MAY simply replace the addresses in
   an existing header.  However, if the RECOMMENDED feature of allowing
   the inner and outer addresses from different address families is
   used, this simple strategy does not work.

9.  IPv4 options handling

   In BEET mode, if IPv4 options or IPv6 options are transported inside
   the tunnel, the sender MUST include a Pseudo Header after ESP header.
   The pseudo-header identifies that IPv4 or IPv6 options from the
   original packet are to be applied on the packet on input side.  The
   sender MUST set the next protocol field on the ESP header as 94.  The
   resulting pseudo header including the IPv4 options MUST be padded to
   8 octet boundary.  The padding length is expressed in octets, valid
   padding lengths are 0 or 4 octets as the original IPv4 options are
   already padded to 4 octet boundary.  The padding MUST be filled with
   NOP options as defined in Internet Protocol [1] section 3.1 Internet
   header format.  The padding is added in front of the original options
   to ensure that the receiver is able to reconstruct the original IPv4
   datagram.  The Header Length field contains the length of the IPv4
   options, and padding in 8 octets units.

   The receiver MUST remove this pseudo-header and padding as a part of
   BEET processing, in order reconstruct the original IPv4 datagram.
   The IPv4 options included into the pseudo-header MUST be added after
   the reconstructed IPv4 (inner) header on the receiving side.







Antony                    Expires 13 March 2024                [Page 11]

Internet-Draft              BEET mode for ESP             September 2023


10.  IPv4 Inner Fragments

   When inner IPv4 datagram is a fragment (as specified by the "more-
   fragments" flag being set to one [RFC791] or non-first fragment),
   this flag MUST NOT be copied to the outer ESP datagram header.
   Additionally, for any non-first fragment with a "more-fragments" flag
   or "fragment offset field", these two fields MUST NOT be copied to
   the outer IPv4 header of the ESP datagram.  Here are a few possible
   ways to deal with these IPv4 fragments.

   1.  Re-assemble the IPv4 fragments, send to ESP and ESP datagram may
       fragmented.

   2.  Drop the IPv4 fragments i.e. BEET mode does MAY not support IPv4
       fragments

       *  Copy the fragment flag, and offset length from inner IPv4
          header to BEET pseudo-header Section 9.

       *  copy the complete inner IP header before the pseudo-header
          Section 9

   3.  Other solutions?  [TBD?]

   TBD Discuss/Decide which of the above options make sense.

11.  IPv6 inner Fragments

   It's crucial to highlight that IPv6, use different fragmentation
   information in a distinct manner than IPv4 [RFC8200] Section 4.5.
   Specifically, an IPv6 fragment uses an optional header for fragments.
   Given its optional nature, the BEET mode can insert a pseudo-header
   with the value "94" and encapsulate all optional headers within the
   BEET datagram Section 9.

12.  Mixed family IPv4 inside and IPv6 outside

   The inner datagram's IP version MUST be independent of outer IP
   version.  The inner address family and address is taken from the
   negotiated Traffic Selectors.











Antony                    Expires 13 March 2024                [Page 12]

Internet-Draft              BEET mode for ESP             September 2023


13.  Policy Considerations

   In this section we describe how the BEET mode affects on IPsec policy
   processing.  This section is normative.  A BEET Security Association
   SHOULD NOT be used with NULL authentication.  On the output side, the
   IPsec policy processing mechanism SHOULD take care that only packets
   with IP addresses matching with the inner addresses of a Security
   Association are passed to that Security Association.  If the policy
   mechanism do not provide full assurance on this, the SA processing
   MUST check the addresses.  Further policy distinction may be
   specified based on IP version, upper layer protocol, and ports.  If
   such restrictions are defined, they MUST be enforced.  On the output
   side, the policy rules SHOULD prevent any packets containing the
   inner IP addresses pair from escaping to the wire in clear text.  On
   the input side, there is no policy processing necessary on encrypted
   packets.  The SA is found based on the SPI and destination address.
   A single SA MAY be associated with several destination addresses.
   Since the outer IPsec addresses are discarded, and since the packet
   authenticity and integrity is protected by ESP, there is no need to
   check the outer addresses.  Since the inner addresses are fixed and
   restored from the SA, there is no need to check them.  There MAY be
   further policy rules specifying allowed upper layer protocols and
   ports.  If such restrictions are defined, they MUST be enforced.  On
   the input side, there SHOULD be a policy rule that filters out clear
   text packets that contain the inner addresses.

14.  Security Considerations

   In this section we discuss the security properties of the BEET mode,
   discussing some limitations [RFC3552].

   There are no known new vulnerabilities that the introduction of the
   BEET mode would create.

   It is currently possible to implement the equivalent of BEET mode by
   using transport mode ESP and explicit network address translation at
   the end-hosts themselves.  However, such an implementation is more
   complex, less flexible, and potentially more vulnerable to security
   problems that are caused by misconfigurations; see Section 9.

   The main security benefit is an operational one.  To implement the
   same functionality without the BEET mode typically requires
   configuring three different, unrelated components in the hosts.

   *  The transport mode ESP SAs must be configured.

   *  A host based NAT function must be configured to properly translate
      between the inner and outer addresses.



Antony                    Expires 13 March 2024                [Page 13]

Internet-Draft              BEET mode for ESP             September 2023


   *  A host firewall must be configured to properly filter out packets
      so that inner addresses do not leak in or out.

   While it may be possible to configure these components to achieve the
   same functionality, such a configuration is error prone, increasing
   the probability of security vulnerabilities.  An integrated BEET mode
   implementation is less prone to configuration mistakes.  Furthermore,
   it would be fairly hard to implement portable key management
   protocols that would be able to configure all of the required
   components at the same time.  On the other hand, it would be easy to
   provide a portable key management protocol implementation that would
   be able to configure BEET mode SAs through the specified PF_KEY
   extensions.

   Since the BEET security associations have the semantics of a fixed,
   point-to-point tunnel between two IP addresses, it is possible to
   place one or both of the tunnel end points into other nodes but those
   that actually "possess" the inner IP addresses, i.e., to implement a
   BEET mode proxy.  However, since such usage defeats the security
   benefits of combined ESP and hostNAT processing, as discussed above,
   the implementations SHOULD NOT support such usage.

   As in the BEET mode the outer header source address is not checked at
   the input handling, there is the potential possibility a DoS attack
   where the attacker sends random packets that match with the SPI of
   some BEET mode SA.  This kind of attack would cause the victim to
   perform unnecessary integrity checks that would result in a failure.
   If this kind of behavior is detected, the node may request rekeying
   from the Key Management Protocol, and after rekeying, if the attacker
   was not on the path, the new SPI value would not be known by the
   attacker.

15.  IKEv2 Negotiation

   When negotiating a Child SA using using IKEv2, the initiator may use
   the new "USE_BEETMODE" Notification, to request a child SA pair with
   BEET mode support.  The method used is similar to how
   USE_TRANSPORT_MODE is negotiated, as described in [RFC7296]

   To request a BEET mode SA on the Child SA pair, the initiator MUST
   include the USE_BEET_MODE notification when requesting a new Child SA
   (either during the initial IKE_AUTH or during CREATE_CHILD_SA
   exchanges).  If the request is accepted then the response MUST also
   include a USE_BEET_MODE notification in its response.  If the
   responder declines, does not include USE_BEET_MODE notification in
   the response, the child SA will be established without BEET mode
   enabled.  If this is unacceptable to the initiator, the initiator
   MUST delete the child SA.



Antony                    Expires 13 March 2024                [Page 14]

Internet-Draft              BEET mode for ESP             September 2023


15.1.  USE_BEET_MODE Notify Message Payload

   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-----------------------------+-------------------------------+
   ! Next Payload  !C!  RESERVED   !         Payload Length        !
   +---------------+---------------+-------------------------------+
   !  Protocol ID  !   SPI Size    !      Notify Message Type      !
   +---------------+---------------+-------------------------------+

                                 Figure 10

   *  Protocol ID (1 octet) - MUST be 0.  MUST be ignored if not 0.

   *  SPI Size (1 octet) - MUST be 0.  MUST be ignored if not 0.

   If initiator and the responder MUST not add USE_TRANSPORT_MODE and
   USE_BEET in the same request.

16.  IANA Considerations

   This document defines a new IKEv2 Notify Message Type payloads for
   the IANA "IKEv2 Notify Message Types - Status Types" registry.

         Value   Notify Type Messages - Status Types    Reference
         -----   ------------------------------    ---------------
         [TBD1]   USE_BEET_MODE                      [this document]

                                 Figure 11

17.  Implementation Status

   [Note to RFC Editor: Please remove this section and the reference to
   [RFC6982] before publication.]

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [RFC7942].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.





Antony                    Expires 13 March 2024                [Page 15]

Internet-Draft              BEET mode for ESP             September 2023


   According to [RFC7942], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

   Authors are requested to add a note to the RFC Editor at the top of
   this section, advising the Editor to remove the entire section before
   publication, as well as the reference to [RFC7942].

17.1.  Linux XFRM

   Linux

   Organization:  Linux kernel Project

   Name:  Linux Kernel https://www.kernel.org/

   Description:  Implements BEET mode in ESP.  The initial support was
      added in 2006.  It is widely used

   Level of maturity:  Stable

   Licensing:  GPLv2

   Implementation experience:  There is no support for IPv4 fragments
      yet.  IPv6 fragments appears to work because the stack is not
      processing IPv6 Optional headers

   Contact:  https://lore.kernel.org/netdev/

17.2.  strongSwan

   Organization:  The strongSwan Project

   Name:  strongSwan https://docs.strongswan.org/docs/5.9/swanctl/
      swanctlConf.html

   Description:  Implement IKE negotiation and and ESP support for BEET
      mode on Linux.

   Level of maturity:  Stable

   Coverage:  Implements negotiating BEET mode support in Child SA
      negotiations and using it in ESP.  The initial support was added
      in 2006




Antony                    Expires 13 March 2024                [Page 16]

Internet-Draft              BEET mode for ESP             September 2023


   Licensing:  GPLv2

   Implementation experience  strongSwan use a private space
      notification value for IKE negotiation.  USE_BEET_MODE (40961).

   Contact  Tobias Brunner tobias@strongswan.org

17.3.  iproute2

   Organization:  The iproute2 Project

   Name:  iproute2 https://git.kernel.org/pub/scm/network/iproute2/
      iproute2.git

   Description:  Implements BEET mode support in ESP. e.g. command
      support "ip xfrm policy ... mode beet" . and "ip xfrm state ..
      mode beet".  The initial support was added in 2006

   Level of maturity:  Stable

   Licensing:  GPLv2

   Implementation experience:  TBD

   Contact:  https://lore.kernel.org/netdev/ or Stephen Hemminger
      stephen@networkplumber.org

18.  Acknowledgments

   [TBD] If Pekka and Jan would like to be the Co-authers I would gladly
   add them.  Currently I am trying reach out to them, via Tero, and ask
   their permission to take over the expired draft-nikander-esp-beet-
   mode-09.  If they choose to be not be Co-authors add a detailed
   acknowledgment for the previous work.

   The authors would like to thank previous by Pekka Nikander and Jan
   Melen, for the earlier Internet Draft of BEET mode.  This work is
   based on their work

   TBD the original draft Acknowledge few more people.  May be copy them
   over.  Lets wait to reach out Pekka Nikander.

19.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.



Antony                    Expires 13 March 2024                [Page 17]

Internet-Draft              BEET mode for ESP             September 2023


   [RFC2401]  Kent, S. and R. Atkinson, "Security Architecture for the
              Internet Protocol", RFC 2401, DOI 10.17487/RFC2401,
              November 1998, <https://www.rfc-editor.org/info/rfc2401>.

   [RFC4303]  Kent, S., "IP Encapsulating Security Payload (ESP)",
              RFC 4303, DOI 10.17487/RFC4303, December 2005,
              <https://www.rfc-editor.org/info/rfc4303>.

   [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.
              Kivinen, "Internet Key Exchange Protocol Version 2
              (IKEv2)", STD 79, RFC 7296, DOI 10.17487/RFC7296, October
              2014, <https://www.rfc-editor.org/info/rfc7296>.

   [RFC791]   Postel, J., "Internet Protocol", STD 5, RFC 791,
              DOI 10.17487/RFC0791, September 1981,
              <https://www.rfc-editor.org/info/rfc791>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017,
              <https://www.rfc-editor.org/info/rfc8200>.

20.  Informative References

   [I-D.nikander-esp-beet-mode]
              Nikander, P. and J. Melen, "A Bound End-to-End Tunnel
              (BEET) mode for ESP", Work in Progress, Internet-Draft,
              draft-nikander-esp-beet-mode-09, 5 August 2008,
              <https://datatracker.ietf.org/doc/html/draft-nikander-esp-
              beet-mode-09>.

   [RFC3552]  Rescorla, E. and B. Korver, "Guidelines for Writing RFC
              Text on Security Considerations", BCP 72, RFC 3552,
              DOI 10.17487/RFC3552, July 2003,
              <https://www.rfc-editor.org/info/rfc3552>.

   [RFC5201]  Moskowitz, R., Nikander, P., Jokela, P., Ed., and T.
              Henderson, "Host Identity Protocol", RFC 5201,
              DOI 10.17487/RFC5201, April 2008,
              <https://www.rfc-editor.org/info/rfc5201>.

   [RFC5202]  Jokela, P., Moskowitz, R., and P. Nikander, "Using the
              Encapsulating Security Payload (ESP) Transport Format with
              the Host Identity Protocol (HIP)", RFC 5202,
              DOI 10.17487/RFC5202, April 2008,
              <https://www.rfc-editor.org/info/rfc5202>.





Antony                    Expires 13 March 2024                [Page 18]

Internet-Draft              BEET mode for ESP             September 2023


   [RFC6982]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", RFC 6982,
              DOI 10.17487/RFC6982, July 2013,
              <https://www.rfc-editor.org/info/rfc6982>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/info/rfc7942>.

   [RFC9333]  Migault, D. and T. Guggemos, "Minimal IP Encapsulating
              Security Payload (ESP)", RFC 9333, DOI 10.17487/RFC9333,
              January 2023, <https://www.rfc-editor.org/info/rfc9333>.

Appendix A.  Additional Stuff

   This becomes an Appendix.

Author's Address

   Antony Antony
   secunet Security Networks AG
   Email: antony.antony@secunet.com




























Antony                    Expires 13 March 2024                [Page 19]
